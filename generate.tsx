/** @jsx h */
/** @jsxFrag Fragment */
import { Fragment, h } from "https://esm.sh/preact@10.15.1";
import { renderToString } from "https://esm.sh/preact-render-to-string@6.2.1";
import { walk } from "https://deno.land/std/fs/mod.ts";
import { basename, extname } from "https://deno.land/std/path/mod.ts";
import { parse } from "https://deno.land/std/flags/mod.ts";

type Query = {
  name: string;
  path: string;
  content: string;
  displayName: string;
};

function QueryList({ queries }: { queries: Query[] }) {
  return (
    <ul>
      {queries.map((q) => (
        <li key={q.name}>
          <a href={`#${q.name}`}>{q.displayName}</a>
        </li>
      ))}
    </ul>
  );
}

function QueryDisplay({ query }: { query: Query }) {
  return (
    <div class="query-container" id={query.name}>
      <h2>{query.displayName}</h2>
      <p>
        File: <code>{query.path}</code>
      </p>
      <pre>
        <code class="language-sql">{query.content}</code>
      </pre>
    </div>
  );
}

function Layout({ queries }: { queries: Query[] }) {
  const timestamp = new Date().toISOString();
  return (
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>BigQuery SQL Queries</title>
        <link
          rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/highlight.js@11.7.0/styles/github.min.css"
        />
        <script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.7.0/build/highlight.min.js">
        </script>
        <script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.7.0/build/languages/sql.min.js">
        </script>
        <style>
          {`
          body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            line-height: 1.6;
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem;
            color: #333;
          }
          header {
            border-bottom: 1px solid #eee;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
          }
          h1 {
            margin-top: 0;
          }
          h2 {
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid #eee;
          }
          pre {
            background: #f8f8f8;
            border-radius: 4px;
            padding: 1rem;
            overflow: auto;
          }
          .query-container {
            margin-bottom: 2rem;
          }
          .toc {
            background: #f8f8f8;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 2rem;
          }
          .toc ul {
            margin: 0;
            padding-left: 1.5rem;
          }
          footer {
            margin-top: 3rem;
            padding-top: 1rem;
            border-top: 1px solid #eee;
            font-size: 0.9rem;
            color: #666;
          }
          .timestamp {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 1rem;
          }
        `}
        </style>
      </head>
      <body>
        <header>
          <h1>BigQuery SQL Queries</h1>
          <p class="timestamp">Generated: {timestamp}</p>
        </header>

        <div class="toc">
          <h3>Table of Contents</h3>
          <QueryList queries={queries} />
        </div>

        {queries.map((query) => <QueryDisplay
          key={query.name}
          query={query}
        />)}

        <footer>
          <p>
            Generated by Deno JSX. SQL queries from{" "}
            <a
              href="https://github.com/leighmcculloch/CodeScratch/tree/main/bigquery"
              target="_blank"
            >
              leighmcculloch/CodeScratch/bigquery
            </a>
          </p>
        </footer>

        <script>
          {`
          document.addEventListener('DOMContentLoaded', () => {
            hljs.highlightAll();
          });
        `}
        </script>
      </body>
    </html>
  );
}

async function generateHtml(): Promise<string> {
  const queries: Query[] = [];

  // Walk through the queries directory and collect SQL files
  for await (
    const entry of walk("./queries", {
      includeDirs: false,
      exts: [".sql"],
    })
  ) {
    const name = basename(entry.path, ".sql");
    const displayName = name.replace(/_/g, " ");
    const content = await Deno.readTextFile(entry.path);
    queries.push({ name, path: entry.path, content, displayName });
  }

  // Sort queries alphabetically
  queries.sort((a, b) => a.name.localeCompare(b.name));

  // Generate HTML using JSX
  const html = "<!DOCTYPE html>\n" +
    renderToString(<Layout queries={queries} />);
  return html;
}

async function main() {
  const args = parse(Deno.args);
  const outputPath = args.output || "dist/index.html";

  // Create output directory if it doesn't exist
  const outputDir = outputPath.split("/").slice(0, -1).join("/");
  if (outputDir) {
    try {
      await Deno.mkdir(outputDir, { recursive: true });
    } catch (error) {
      if (!(error instanceof Deno.errors.AlreadyExists)) {
        throw error;
      }
    }
  }

  // Generate HTML
  const html = await generateHtml();

  // Write to file
  await Deno.writeTextFile(outputPath, html);

  console.log(`HTML generated at ${outputPath}`);
}

if (import.meta.main) {
  main();
}
